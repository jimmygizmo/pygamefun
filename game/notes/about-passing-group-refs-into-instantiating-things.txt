


def event_meatball(group_ref: pygame.sprite.Group):
    # NOTE: Pending a different design, we must pass the group INTO ANYTHING which instantiates sprites for that group.
    #     This group does not exist yet, when func defined. We will have it when this func is called, however.
    #     I use the suffix _ref here mostly for further clarity that it is a different variable and what we are doing
    #     with it. It is the same thing as passing the group itself. They are the same reference, same memory address.
    #     In Python, almost everyhting is passed by reference anyhow. Passing and copying is a other special set of scenarios.
    #     I'm doing absolutely nothing special by calling this group_ref.
    meatball_spec = weapon_specs[1]
    spawn_x = random.randint((0 - cfg.MEATBALL_SPAWN_MARGIN), (cfg.SCREEN_WIDTH + cfg.MEATBALL_SPAWN_MARGIN))
    spawn_y = random.randint((0 - 2 * cfg.MEATBALL_SPAWN_MARGIN), ( 0 - cfg.MEATBALL_SPAWN_MARGIN))
    print(f"Meatball spawning at : {spawn_x}, {spawn_y}")
    projectile: Weapon = Weapon(
            groups=[all_sprites, group_ref],
            img_filename=meatball_spec['img_filename'],
            x=spawn_x,
            y=spawn_y,
            direction=pygame.math.Vector2((0.0, 1.0)),  # Down (Meatballs fall from the sky.)
            speed=meatball_spec['s'],
        )  # PyCharm FALSE WARNING HERE (AbstractGroup)






AND THE RELATED CALLING CODE:


# These additional variables are here just to make it clear that because of timing and the order of execution vs.
# instantiation, this is why we do have to pass app_weapons into player and why we MIGHT need to pass in other groups,
# such as all_sprites. This is just academic/theoretical about all_sprites, but it needs to be clear we have to pass
# some things IN, EVEN if they seem like globally-accessible objects. We almost never should be globally accessing
# like that anyhow, most would argue, but lets plan for everything and undertand everything and make the best choices
# based of clarity of understanding. Having clarity requires some extra annotations, comments, testing, validation,
# alternate code, experimentation, generating validation data (like our two kinds of resize validation images) and
# also, adding seemingly unnecessary variables, if only to make a concept of factor really stand out. Espeically in
# an evolving, educational and experimental, free-form project like this. Yes this is game code, but I am treating this
# as being as important as production weapons guidance code or anything very commercially important. My ideas and
# workflows come from all sizes and kinds of elite Silicon Valley software development teams and mix them all
# together in projects like this, highlighting the appropriate doses of the best of everything I know about coding
# independently as well as for a team of different sizes, for various kinds of systems. Gaming is great, because it
# touches on a LOT of things and in an advanced way with performance, data size structure/compexity and so much more
# to allow folks to get so much value out of such projects.
all_weapons_group_ref=all_weapons  # Here for clarity. We need to pass this to anything that instantiates weapons.
all_sprites_group_ref=all_sprites  # Again, for clarity. TODO: There is a CHANGE I may need to pass this in IF I ever
#                                                              need to use it. Currently not used and not passed in.

#   * * * * * * *    MAIN LOOP    * * * * * * *

.....


        if event.type == meatball_event:
            event_meatball(all_weapons_group_ref)


......

